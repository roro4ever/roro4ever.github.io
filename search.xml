<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在Chrome中管理同一网站的多个账号</title>
    <url>/2019/11/28/%E5%9C%A8Chrome%E4%B8%AD%E7%AE%A1%E7%90%86%E5%90%8C%E4%B8%80%E7%BD%91%E7%AB%99%E7%9A%84%E5%A4%9A%E4%B8%AA%E8%B4%A6%E5%8F%B7/%E5%9C%A8chrome%E4%B8%AD%E7%AE%A1%E7%90%86%E5%90%8C%E4%B8%80%E7%BD%91%E7%AB%99%E7%9A%84%E5%A4%9A%E4%B8%AA%E8%B4%A6%E5%8F%B7/</url>
    <content><![CDATA[<p>有时，我们会在同一个网站注册多个账号，即所谓的小号。  </p>
<p>对一个网站来说，同一时刻同一浏览器只能登录一个账号，要登录另一个账号必须退出当前在线的账号。</p>
<p>但在chrome中，可以利用<strong>用户管理</strong>实现同时登录多个账号。</p>
<p>其原理是通过在 chrome 中建立多个<strong>用户</strong>，每个用户的数据、设置都是完全独立的，包括书签、历史、设置、插件、网页应用、Cookie等。每个用户可以独占一个Chrome窗口，这样就可以在不同的窗口（用户）中，用不同的账号同时登陆同一个网站。</p>
<p>具体操作很简单：  </p>
<p>1.点击右上角的头像图标  </p>


<!-- ![](2019-11-28-在Chrome中管理同一网站的多个账号/20191128152704735_4830.png) -->

<p>2.在下拉菜单中选择“管理用户”，  </p>


<!-- ![](2019-11-28-在Chrome中管理同一网站的多个账号/20191128152858105_5362.png)-->

<p>弹出“添加用户”、“以访客身份浏览”的界面。</p>


<!-- ![](2019-11-28-在Chrome中管理同一网站的多个账号/20191128161700196_30050.png)-->
<p>在这里可以添加新用户，或切换到访客身份。</p>
<p>新用户可以是本地账户(不关联google账户，数据和设置仅存储在本地)，也可以是google账户(通过gmail关联，允许将设置和数据同步到google服务器，当然也可以不同步)。</p>
]]></content>
      <categories>
        <category>应用软件</category>
      </categories>
  </entry>
  <entry>
    <title>1.4 数据模型</title>
    <url>/2019/11/18/1-4-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/1-4-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="第四节-数据模型"><a href="#第四节-数据模型" class="headerlink" title="第四节 数据模型"></a>第四节 数据模型</h1><p>模型(model)，通过对”现实世界事物的特征“进行抽象，实现模拟。</p>
<p>数据模型(Data Model)，也是对”现实世界中数据的特征“进行了抽象，从而模拟了现实世界的数据。</p>
<h2 id="一、数据特征与数据模型组成要素"><a href="#一、数据特征与数据模型组成要素" class="headerlink" title="一、数据特征与数据模型组成要素"></a>一、数据特征与数据模型组成要素</h2><p>现实世界中的数据具有两种特征：</p>
<ol>
<li>静态特征：数据的基本结构、数据间的联系、对数据的约束（比如取值范围）</li>
<li>动态特征：对数据可以进行的、符合一定规则的操作。</li>
</ol>
<p>对数据进行抽象的数据模型，自然就需要描述数据的静态特征和动态行为，并为数据的表示和操作提供框架。</p>
<p>数据模型的定义：<br>描述数据的静态结构，定义可对数据执行的操作和数据间约束的一组概念。</p>
<h3 id="数据模型的三要素："><a href="#数据模型的三要素：" class="headerlink" title="数据模型的三要素："></a>数据模型的三要素：</h3><h6 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1.数据结构"></a>1.数据结构</h6><p>描述数据的静态特性，如：数据类型、内容、属性、数据之间的联系。</p>
<p>常常用”数据结构的类型“来命名数据模型，比如：<br>层次结构（树）–层次模型，网状结构（有向图）–网状模型，关系结构（二维表）–关系模型。</p>
<h6 id="2-数据操作"><a href="#2-数据操作" class="headerlink" title="2. 数据操作"></a>2. 数据操作</h6><p>数据操作描述了数据的动态特性，包括：允许对数据执行的操作和操作规则。</p>
<p>操作分为更新和检索两大类，更新包括：插入、删除、修改。</p>
<p>操作规则包括：各操作的优先级等。</p>
<h5 id="3-数据约束"><a href="#3-数据约束" class="headerlink" title="3. 数据约束"></a>3. 数据约束</h5><p>数据约束描述了：数据结构中，数据间的语法和语义关联，包括（相互制约关系）、（相互依存关系）、（数据的动态变化规则），从而保证数据的完整性（正确性、有效性、相容性）。  </p>
<p>数据约束又分为：</p>
<ol>
<li>数据完整性约束：</li>
<li>数据安全性约束：</li>
<li>并发控制约束：</li>
</ol>
<h2 id="二、数据模型的分类"><a href="#二、数据模型的分类" class="headerlink" title="二、数据模型的分类"></a>二、数据模型的分类</h2><p>理想的数据模型，应该满足三方面的要求：</p>
<ul>
<li>比较真实的模拟现实世界</li>
<li>容易被人们理解</li>
<li>便于在计算机上实现</li>
</ul>
<p>但几乎没有这样的数据模型。<br>因此，只能采用逐步抽象的方法：在不同的层面使用不同的数据模型。  </p>
<p>首先将现实世界抽象为信息世界中的某种信息结构（数据模型），它不依赖于具体的计算机系统，不依赖于具体的DBMS，只是一种概念。<br>然后，将概念级的信息模型抽象为某一具体的DBMS支持的数据模型。  </p>
<p>因此，数据模型是数据库系统DBS的核心和基础。</p>
<p>数据模型从分层角度，可分为：</p>
<ol>
<li>概念层数据模型</li>
<li>逻辑层数据模型，</li>
<li>物理层数据模型</li>
</ol>
<p>数据模型有”型“和”值“的之分。  </p>
<ul>
<li>型：描述了实体型的结构和属性。（实体型概念见后文）  </li>
<li>值：某个具体实体的值。</li>
</ul>
<h3 id="1-概念层数据模型，也称为数据的概念模型，信息模型，Conceptual-Model"><a href="#1-概念层数据模型，也称为数据的概念模型，信息模型，Conceptual-Model" class="headerlink" title="1.概念层数据模型，也称为数据的概念模型，信息模型，Conceptual Model"></a>1.概念层数据模型，也称为数据的概念模型，信息模型，Conceptual Model</h3><p>抽象的表示了现实世界的各种事物及其联系，与计算机系统和DBMS无关。</p>
<p>概念模型有几个优点：</p>
<ul>
<li>是设计数据库的有力工具</li>
<li>数据库设计人员和用户之间的交流语言</li>
</ul>
<h4 id="（1）信息世界中的基本概念"><a href="#（1）信息世界中的基本概念" class="headerlink" title="（1）信息世界中的基本概念"></a>（1）信息世界中的基本概念</h4><p>①实体(Entity)：客观存在并可以相互区别的事物。实体可以是抽象的概念或联系。</p>
<p>②属性(attribute)：实体的某种特性。一个实体可以有多个属性。</p>
<p>③码或键(key):可<strong>唯一标识实体</strong>的”属性集合“，称为码或键。</p>
<p>④域(domain):属性的取值范围。每个属性都有自己的域。</p>
<p>⑤实体型(Entity Type)：属性完全相同的实体构成一个类型，称为”实体型“。用”实体名+属性集合“来表达实体型。比如：<em>学生（学号、姓名、性别、出生日期）</em> 就是一个实体型。</p>
<p>⑥实体集(Entity Set)：实体型中实体的集合，称为实体集。</p>
<p>⑦关系、联系(Relationship)：实体（型）内部的联系（即属性之间的联系），和实体（型）之间的联系。联系也可以有属性！</p>
<h4 id="（2）概念模型的表示方法"><a href="#（2）概念模型的表示方法" class="headerlink" title="（2）概念模型的表示方法"></a>（2）概念模型的表示方法</h4><p>概念模型的表示方法很多，最常用的是实体-联系方法（Entity-Relationship approch)，简称ER方法。</p>
<p>ER方法（也称为ER模型）：采用ER图来表示概念模型。</p>
<p>ER图的表示方法：</p>
<ul>
<li>实体型：用矩形表示，内部写明实体的名称。</li>
<li>属性：用椭圆形表示，并用无向边连接到实体。</li>
<li>联系：用菱形表示，内部写明联系的名称，用无向边连接相关的实体，并在无向边旁标注联系的类型（1：1，1：N；M：N）。如果联系具有属性，则这些属性也有用无向边与联系相连接。</li>
</ul>
<h3 id="2-逻辑层数据模型，数据的逻辑模型（Logic-Model"><a href="#2-逻辑层数据模型，数据的逻辑模型（Logic-Model" class="headerlink" title="2.逻辑层数据模型，数据的逻辑模型（Logic Model)"></a>2.逻辑层数据模型，数据的逻辑模型（Logic Model)</h3><p>逻辑层模型描述了：某业务/某组织涉及的数据的整体逻辑结构。</p>
<p>逻辑模型是以计算机系统看待世界的观点来完成数据建模的。</p>
<p>所有的DBMS都必须基于某种逻辑模型。</p>
<p>逻辑模型分为：</p>
<ul>
<li>层次模型（树）：DBMS最早使用的数据模型。其数据结构是一棵”有向树“。每个节点对用了一个记录集（即现实世界的实体集）。缺点：层次模型难以表达实体之间比较复杂的联系。</li>
<li>网状模型（有向图）：优点是可以表示实体间各种联系，缺点是过于复杂，实现的算法难以规范化。</li>
<li>关系模型（二维表）：以二维表来表示实体和联系，并以二维表来组织数据。关系模型的优点：  <ul>
<li>具有严格的数学基础：以集合论中的关系数学理论为基础。</li>
<li>数据结构简单清晰，用户易懂易用：统一用关系（即表）来表示实体和联系，检索和更新结果也用关系来表示。</li>
<li>存取路径透明，具有更高的数据独立性、更好的保密性：关系模型把存取路径向用户隐蔽起来，用户只需要指出”干什么“或”找什么“，不必详细说明”怎么干“或”怎么找“（层次模型就需要说明）。</li>
</ul>
</li>
<li>面向对象模型(对象）：用面向对象的观点来描述实体、联系的数据模型。比关系模型的表达能力更强，且对象可复用，维护方便。面向对象模型既是概念模型，又是逻辑模型。</li>
</ul>
<h3 id="3-物理层数据模型，数据的物理模型，Physical-Model"><a href="#3-物理层数据模型，数据的物理模型，Physical-Model" class="headerlink" title="3.物理层数据模型，数据的物理模型，Physical Model"></a>3.物理层数据模型，数据的物理模型，Physical Model</h3><p>描述了数据在存储介质上的组织结构，是逻辑模型的物理实现。</p>
<p>物理模型确定了：数据的物理存储结构、数据存取路径、优化数据库的性能。</p>
<p>物理模型的抽象由DBMS负责完成。</p>
]]></content>
      <categories>
        <category>数据库系统原理</category>
        <category>第一章 数据系统概述</category>
      </categories>
  </entry>
  <entry>
    <title>1.3 数据系统的结构</title>
    <url>/2019/11/18/1-3-%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84/1-3-%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="第三节-数据库系统的结构"><a href="#第三节-数据库系统的结构" class="headerlink" title="第三节 数据库系统的结构"></a>第三节 数据库系统的结构</h1><p>在一个数据库系统中，不同的用户从不同的角度看待数据库，会形成不同的视图结构。</p>
<ul>
<li>从DBA的角度来看， 数据库系统分为：<ul>
<li>内部系统结构：<ul>
<li>模式</li>
<li>外模式</li>
<li>内模式</li>
</ul>
</li>
<li>外部系统结构：<ul>
<li>集中式结构</li>
<li>分布式结构</li>
<li>并行结构</li>
</ul>
</li>
</ul>
</li>
<li>从数据库系统的用户（如应用程序开发人员）来看——数据系统的运行和应用结构<ul>
<li>客户/服务器结构，CS</li>
<li>浏览器/服务器结构，BS</li>
</ul>
</li>
</ul>
<h2 id="一、数据库系统的三级模式结构"><a href="#一、数据库系统的三级模式结构" class="headerlink" title="一、数据库系统的三级模式结构"></a>一、数据库系统的三级模式结构</h2><p>所有的DBMS都遵循美国 ANSI/SPARC 数据库管理研究组提出的三级模式结构：外模式（用户级）、模式（概念级）、内模式（物理级）。</p>
<h3 id="1-模式，概念模式，逻辑模式，Schema"><a href="#1-模式，概念模式，逻辑模式，Schema" class="headerlink" title="1.模式，概念模式，逻辑模式，Schema"></a>1.模式，概念模式，逻辑模式，Schema</h3><p>模式：是数据库中全体数据的逻辑结构和特征的描述，是数据库的全局概念视图。</p>
<p>模式定义了数据的逻辑结构、数据之间的联系，以及数据的安全性、完整性要求。</p>
<p>模式与数据的物理存储细节、硬件环境无关，也与具体的应用程序、开发工具、开发语言无关。</p>
<p>一个数据库只能有一个模式。</p>
<p>P.S. 模式可以简单的理解为 表、主键、外键、视图、约束等，并且属于所有用户（不属于特定用户）。</p>
<h3 id="2-外模式，子模式，用户模式，subSchema"><a href="#2-外模式，子模式，用户模式，subSchema" class="headerlink" title="2.外模式，子模式，用户模式，subSchema"></a>2.外模式，子模式，用户模式，subSchema</h3><p>外模式：是数据库用户（包括程序员和终端用户）能够看见和使用的，局部数据的逻辑结构和特征的描述。</p>
<p>外模式是用户视图，是模式的子集，它和某个应用所需的数据紧密联系。</p>
<p>外模式还能够对模式的局部数据重构。<br>模式中同样的数据，在外模式中其结构、类型、长度、权限都可以不同。  </p>
<p>外模式可以保证数据库安全，还可以简化数据库系统的用户接口，并支持了数据的独立性和共享性。</p>
<h3 id="3-内模式，存储模式，storage-schema"><a href="#3-内模式，存储模式，storage-schema" class="headerlink" title="3.内模式，存储模式，storage schema"></a>3.内模式，存储模式，storage schema</h3><p>内模式：是对数据库中数据的物理结构和存储方式的描述，是数据在数据库内部的表示形式。</p>
<p>内模式是数据库的最底层，但并非物理层！它仍然属于逻辑描述，比如：<br>记录、索引、文件的组织方式，存储数据时采用顺序结构存储还是B树结构存储，数据是否压缩是否加密等。<br>而非具体的物理方法：柱面、磁道的大小等，那些属于文件系统的范畴。</p>
<h3 id="4-三级模式结构的两层映像，与数据独立性"><a href="#4-三级模式结构的两层映像，与数据独立性" class="headerlink" title="4. 三级模式结构的两层映像，与数据独立性"></a>4. 三级模式结构的两层映像，与数据独立性</h3><p>三级模式是对数据的三级抽象，三级抽象具有如下的特点：</p>
<ul>
<li>概念模式独立于内模式和外模式（它只和业务相关），是数据库的核心，也是数据库设计的关键</li>
<li>内模式<strong>依赖</strong>于概念模式，但独立于外模式和存储设备。</li>
<li>外模式依赖于模式和具体的应用程序，独立于内模式和存储设备。</li>
<li>应用程序依赖于外模式，独立于模式和内模式</li>
</ul>
<p>为了有效支撑三级抽象，DBMS提供了两层映像（映像就是对应规则，指出双方如何转换的）</p>
<ul>
<li>外模式/模式映像：定义了各个外模式和模式之间的映像关系，这些映像存在于外模式中。每一个外模式都有一个外模式/模式映像。如果模式发生变化，DBA会对各个外模式/模式映像进行更新，以尽量保持外模式不变，实现数据与程序的逻辑独立性。</li>
<li>模式/内模式映像：定义了概念模式和内模式之间的对应关系，通常存在于概念模式中。模式/内模式映像只有一个。当内模式发生改变时，DBA会修改模式/内模式映像，使模式保持不变，实现了数据与程序的物理独立性。</li>
</ul>
<h2 id="二、数据库系统的运行与应用结构"><a href="#二、数据库系统的运行与应用结构" class="headerlink" title="二、数据库系统的运行与应用结构"></a>二、数据库系统的运行与应用结构</h2><h3 id="1-客户-服务器结构，CS"><a href="#1-客户-服务器结构，CS" class="headerlink" title="1. 客户/服务器结构，CS"></a>1. 客户/服务器结构，CS</h3><ul>
<li>客户端/前台/表示层：命令行客户端、GUI管理工具、应用程序  </li>
<li>服务器/后台/数据层：DBMS</li>
</ul>
<h3 id="2-浏览器-服务器结构，BS"><a href="#2-浏览器-服务器结构，BS" class="headerlink" title="2. 浏览器/服务器结构，BS"></a>2. 浏览器/服务器结构，BS</h3><p>BS结构：基于WEB应用的客户/服务器结构，也称为”三层结构“。</p>
<ul>
<li>表示层：数据库使用者的操作和展示界面，通常指浏览器。</li>
<li>处理层：也称为中间层，负责处理具体的应用逻辑。</li>
<li>数据层：DBMS。</li>
</ul>
<p>处理层+ 数据层，称为”胖服务器“。</p>
]]></content>
      <categories>
        <category>数据库系统原理</category>
        <category>第一章 数据系统概述</category>
      </categories>
  </entry>
  <entry>
    <title>1.2 数据管理技术的发展</title>
    <url>/2019/11/18/1-2-%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8F%91%E5%B1%95/1-2-%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8F%91%E5%B1%95/</url>
    <content><![CDATA[<h1 id="第二节-数据管理技术的发展"><a href="#第二节-数据管理技术的发展" class="headerlink" title="第二节 数据管理技术的发展"></a>第二节 数据管理技术的发展</h1><h6 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h6><p>数据管理包括2个方面：</p>
<ol>
<li>针对组织的业务数据的管理：制定并执行“组织中关于数据的定义、组织、保护与使用的”的策略、过程和计划；（这是与数据管理技术无关的活动）</li>
<li>依靠数据管理技术，集中控制管理数据。（本节的主要内容）</li>
</ol>
<p>与计算机技术结合的数据管理包括：</p>
<ul>
<li>收集：收集数据，将存储在其他介质的数据转换成计算机可处理的形式；</li>
<li>组织：将收集来的数据进行适当的构造<ul>
<li>逻辑组织：用户或应用程序所见到的数据结构形式</li>
<li>物理组织：数据在物理存储设备上的结构形式</li>
</ul>
</li>
<li>归类存储：正在使用的数据，和作为备份的数据。</li>
<li>提供检索方法：便于用户快速获取信息</li>
<li>存取：建立规则和执行规则的过程，控制数据的存取，从而保护数据的正确性和安全性</li>
<li>维护：数据的规模和结构可能发生变化，需要维护。</li>
</ul>
<p>数据管理的任务（目的）：通过数据的收集、组织、控制、存储、选取、维护，实现在适当的时刻、以适当的形式、向适当的人提供适当的数据。</p>
<h6 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h6><p>数据管理是数据处理的中心问题，数据处理比数据管理的概念更宽泛。</p>
<p>数据处理：对各种数据进行收集、存储、加工、传播的活动。</p>
<h2 id="数据管理技术"><a href="#数据管理技术" class="headerlink" title="数据管理技术"></a>数据管理技术</h2><h3 id="1-人工管理阶段"><a href="#1-人工管理阶段" class="headerlink" title="1.人工管理阶段"></a>1.人工管理阶段</h3><p>特点：</p>
<ul>
<li>数据无法保存在计算机中：没有磁盘等存储设备，输入数据和输出只能放在纸带上，程序执行完毕后，数据空间随程序空间一起被释放。</li>
<li>应用程序管理数据：没有操作系统也没有数据管理软件，数据由应用程序执行负责，数据的逻辑结构、物理结构（读写纸带）、存取方法都由应用程序编写人员来完成。数据和应用程序高度依赖。</li>
<li>数据面向应用：一组数据只能用于一个程序，多个程序要无法使用同一组数据，只能分别定义，数据冗余度非常高，数据独立性差。</li>
</ul>
<h3 id="2-文件系统阶段"><a href="#2-文件系统阶段" class="headerlink" title="2.文件系统阶段"></a>2.文件系统阶段</h3><p>数据的物理独立性：文件系统分离了数据的逻辑结构（文件的内容，即数据）和物理结构（文件在文件系统中如何存放），应用程序读写数据的逻辑结构，文件系统管理文件的物理结构。<br>即使物理结构发生了改变，比如：把磁盘从一种文件系统转换为另一种文件系统，或者将文件从一台机器拷入另一台具有不同文件系统的机器，就不需要修改应用程序——因为文件的内容，即逻辑结构没有改变。</p>
<p>特点：</p>
<ul>
<li>数据可以长期保存在计算机中：有了磁盘、磁鼓等直接存取设备。</li>
<li>数据以文件的形式由文件系统管理：有了操作系统，以及专门的数据管理软件——文件系统</li>
<li>实现了数据的物理独立性：使数据的逻辑结构和物理结构分离开来。</li>
<li>实现了文件级的数据共享：一个文件可以为多个应用程序服务。也可以抽取多个文件的内容，组织成新的文件，形成新的数据。</li>
</ul>
<p>缺点：<br>只实现了文件级的共享，没有实现记录级的共享。应用程序和数据之间仍然存在依赖关系，仍然可能需要构建新的文件来满足应用程序的需要，从而导致数据冗余。</p>
<h3 id="3-数据库系统阶段"><a href="#3-数据库系统阶段" class="headerlink" title="3.数据库系统阶段"></a>3.数据库系统阶段</h3><ul>
<li>数据集成：数据被集成到DBMS中，得到最大程度的共享，冗余最小。</li>
<li>数据共享度高：多个用户可以共同使用相同的数据，而且可以同时并发存取同一数据。</li>
<li>数据冗余小：冗余不应该完全消除，为了合法性检验、数据存取效率等原因，受控的冗余是应该的。</li>
<li>数据一致性：冗余的多个副本没有同时得到更新，导致失去一致性。维持一致性是数据库系统的任务。</li>
<li>数据独立性高：数据和应用程序分离。在文件系统中，修改数据的定义、存取数据的逻辑，都需要修改应用程序(修改数据的定义后，文件的读取会受到影响，应用程序就需要修改）。<ul>
<li>数据的逻辑独立：如果应用程序只修改视图，就不会影响数据；在一定范围内修改数据的定义，也可能不需要修改应用程序（修改部分可能不涉及应用程序读取的部分）。</li>
<li>数据的物理独立：改变数据的存储结构、存取方法，无需修改应用程序。（应用程序关心的是数据的逻辑结构）</li>
</ul>
</li>
<li>实施统一管理和控制：DBMS 可以实现对数据的统一管理和控制，包括：<ul>
<li>安全性：每个用户只能按照规定的方式访问数据，比如权限管理，防止了泄密和破坏。</li>
<li>完整性：保证输入到数据库的数据满足约束，数据之间满足一定的关系，数据只在一定范围内有效（比如性别只能男和女）。</li>
<li>并发控制：DBMS需要对并发访问进行控制、协调，避免得到错误结果，或破坏数据库的完整性。</li>
<li>故障恢复：将数据库恢复到某个已知的正确状态。</li>
</ul>
</li>
<li>减少应用程序开发和维护的工作量：数据的共享性和独立性促成。</li>
</ul>
<h6 id="补充资料"><a href="#补充资料" class="headerlink" title="补充资料"></a>补充资料</h6><p>数据的完整性：是对数据的正确性、有效性、和相容性的要求。</p>
<p>有效性：对数据是否正确的测试标准。</p>
<p>相容性：描述同一事实的两个数据应相同，称为两个数据相容，否则两个数据不相容。比如一个人不能有2个性别。</p>
]]></content>
      <categories>
        <category>数据库系统原理</category>
        <category>第一章 数据系统概述</category>
      </categories>
  </entry>
  <entry>
    <title>第一节 数据库基本概念</title>
    <url>/2019/11/18/%E7%AC%AC%E4%B8%80%E8%8A%82-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E7%AC%AC%E4%B8%80%E8%8A%82-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="第一章-数据系统概述"><a href="#第一章-数据系统概述" class="headerlink" title="第一章 数据系统概述"></a>第一章 数据系统概述</h1><h2 id="第一节-数据库基本概念"><a href="#第一节-数据库基本概念" class="headerlink" title="第一节 数据库基本概念"></a>第一节 数据库基本概念</h2><h3 id="1-数据"><a href="#1-数据" class="headerlink" title="1.数据"></a>1.数据</h3><p>数据是描述事物的符号记录，是用物理符号记录下来的、可以鉴别的信息。</p>
<p>人们通常抽取事物的某些特征或属性来描述事物。<br>此时仅有数据，没有对数据的解释就无法理解数据的意义。</p>
<p>语义：数据所蕴含的信息，是对数据的解释。</p>
<p>数据和语义密不可分。</p>
<p>没有语义的数据是无意义的，不完整的。</p>
<h3 id="2-数据库"><a href="#2-数据库" class="headerlink" title="2.数据库"></a>2.数据库</h3><p>数据库(DataBase,DB)：长期存储在计算机中的，有组织、可共享的数据集合。</p>
<p>数据库中的数据具有下列特点：</p>
<ul>
<li>按一定的数据模型组织、描述、存储</li>
<li>具有较小的冗余度</li>
<li>较高的数据独立性</li>
<li>可以被多个用户共享</li>
</ul>
<h3 id="3-数据库管理系统"><a href="#3-数据库管理系统" class="headerlink" title="3. 数据库管理系统"></a>3. 数据库管理系统</h3><p>数据库管理系统(DataBase Management System,DBMS)：创建和管理数据库的一套软件。</p>
<p>DBMS 介于应用程序和操作系统之间，负责：<br>组织和存储数据，使数据库使用者（应用程序、人）能够快速获取所需数据，通过统一的控制机制提供必要的安全性和完整性，管理和维护数据。</p>
<p>DBMS的主要功能：</p>
<ul>
<li>数据定义功能：通过DDL定义DB中的数据对象——表、视图、存储过程、触发器等。</li>
<li>数据操纵功能：通过DML操纵数据，实现增删查改等。</li>
<li>数据库的运行、管理功能：DBMS的控制和管理机制，使多个用户可以安全、可靠的同时使用数据，并能够恢复出现故障的数据库。</li>
<li>数据库的建立和维护功能：创建数据库、维护数据库空间、备份与恢复数据库、数据库的性能监视与分析。这些功能是通过DBMS提供的一些实用工具来实现的。</li>
<li>数据组织、存储、管理功能：为了提高对数据库中数据的存取效率，DBMS需要对数据库中的数据在物理层面上分类存储和管理。DBMS还提供了多种数据的存取方法，比如索引查找、顺序查找等。（这个功能，可能涉及了数据的物理存储层面的东西）</li>
<li>其他功能：与其他软件的网络通信功能，不同DBMS之间传输数据、访问对方数据库，通过DBMS提供的API，使用编程语言与数据库交互等。</li>
</ul>
<h3 id="4-数据库系统"><a href="#4-数据库系统" class="headerlink" title="4. 数据库系统"></a>4. 数据库系统</h3><p>数据库系统(Database System,DBS)：在计算机中引入数据库技术之后的系统。</p>
<p>一个完整的DBS包括：</p>
<ul>
<li>DBMS及实用工具</li>
<li>DB </li>
<li>应用程序 </li>
<li>DBA </li>
<li>用户（程序员+数据库终端用户）：DBS的服务对象。终端用户以交互方式向DBS提供操作请求，DBMS响应请求访问DB中的数据，返回给终端用户。终端用户不是应用程序的使用者。</li>
</ul>
]]></content>
      <categories>
        <category>数据库系统原理</category>
        <category>第一章 数据系统概述</category>
      </categories>
  </entry>
  <entry>
    <title>1.3 计算机网络的分类</title>
    <url>/2019/11/17/1-3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%88%86%E7%B1%BB/1-3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="1-3-1-按拓扑类型"><a href="#1-3-1-按拓扑类型" class="headerlink" title="1.3.1 按拓扑类型"></a>1.3.1 按拓扑类型</h2><p>网络拓扑：  指网络的形状，或者说网络在物理上的连通性。</p>
<p>网络拓扑包括：</p>
<ul>
<li>星型  </li>
<li>总线型</li>
<li>环形</li>
<li>树形</li>
<li>混合型</li>
<li>网型<a id="more"></a>

</li>
</ul>
<p>选择哪一种拓扑类型，与传输介质、介质访问控制方法有关。<br>选择网络拓扑类型时，应考虑以下因素：  </p>
<ul>
<li>可靠性：保证所有的数据能够准确送达目的节点。</li>
<li>可维护性：便于故障检测、故障隔离</li>
<li>费用：信道费用、安装费用</li>
<li>灵活性：便于添加、删除节点，易于配置拓扑结构</li>
<li>响应时间：尽可能短</li>
<li>吞吐量：尽可能大</li>
</ul>
<p>网络拓扑根据通信子网中的信道类型可分为：</p>
<ul>
<li>点对点信道：每条信道连接一对节点。包括：  <ul>
<li>星型</li>
<li>环形</li>
<li>树形</li>
<li>网型</li>
</ul>
</li>
<li>广播信道：多个网络节点共享一个公共信道。<ul>
<li>总线型</li>
<li>环形</li>
<li>树形</li>
<li>无线通信</li>
<li>卫星通信</li>
</ul>
</li>
</ul>
<h4 id="1-星型拓扑"><a href="#1-星型拓扑" class="headerlink" title="1.星型拓扑"></a>1.星型拓扑</h4><p>星型拓扑，是由<strong>中央节点</strong>，和通过“点对点通信链路”连接到中央节点的<strong>周边节点</strong>，组成。</p>
<p>中央节点往往是一个集线器(hub)。</p>
<p>集中式通信控制策略：<br>中央节点执行集中式通信控制策略，因此中央节点的负担较重，而周边节点处理通信的负担很轻。</p>
<p>优点：</p>
<ul>
<li>控制简单：任一周边节点只与中央节点相连，因此介质访问控制方法简单，访问协议简单，网络监控简单。</li>
<li>故障检测、隔离简单：单个周边连接点的隔离很容易，便于检测故障，即使发生故障，也可以直接隔离，不会影响其他节点。</li>
<li>方便服务：中央节点可以方便的对周边节点提供服务，以及重新配置网络。</li>
</ul>
<p>缺点：  </p>
<ul>
<li>电缆长度、安装量客观：</li>
<li>中央节点负担太重，形成瓶颈：一旦中央节点故障，则全网瘫痪。</li>
<li>周边节点的分布处理能力低下</li>
</ul>
<h4 id="总线拓扑"><a href="#总线拓扑" class="headerlink" title="总线拓扑"></a>总线拓扑</h4><p>总线拓扑：所有节点都接入一条传输介质上，该传输介质作为共享的公共信道——称为总线。</p>
<p>分布式通信控制策略：<br>任何一个节点发送的数据都会沿着总线传输，其他节点都可以接受该数据。<br>为了防止多个站点同时发送数据造成信道拥堵，总线拓扑采用分布式通信控制策略：一个时点只允许一个节点发送数据。</p>
<p>优点：  </p>
<ul>
<li>需要的电缆数量少：</li>
<li>结构简单，又是无源工作，可靠性较高：</li>
<li>增加、删除节点比较方便</li>
</ul>
<p>缺点：  </p>
<ul>
<li>总线的传输距离有限，网络规模受限</li>
<li>故障诊断、隔离较困难</li>
<li>分布式通信控制协议不能保证数据的及时传输，不具有实时功能，业务量越大网络速度就越慢。</li>
<li>节点必须是智能的，要有介质访问控制功能，增加了站点的硬件和软件开销。</li>
</ul>
<h4 id="环形拓扑"><a href="#环形拓扑" class="headerlink" title="环形拓扑"></a>环形拓扑</h4><p>环形拓扑：由节点和节点间的链路构成的一个闭合环。  </p>
<p>工作方式：<br>每个节点可以接受来自于链路的数据，并可以将数据通过链路发送到下一个节点。<br>链路可以是单向的（数据总是沿着固定方向传输），也可以是双向的（数据传输方向不固定）。<br>数据是以分组的形式发送的，每个分组除了数据，还有一些控制信息，包括源和目的地址。</p>
<p>环形拓扑采用分布式通信控制策略。</p>
<p>优点：  </p>
<ul>
<li>电缆长度短：其长度与总线型拓扑一样</li>
<li>可使用光纤： </li>
<li>所有节点都公平的访问网络的其他部分（通信子网、资源子网），网络性能稳定。</li>
</ul>
<p>缺点：  </p>
<ul>
<li>任一节点故障会引起全网故障：</li>
<li>增加、删除节点较复杂</li>
<li>介质访问控制协议采用令牌传递，在负载很低时，信道利用率就很低。</li>
</ul>
<h4 id="树形拓扑"><a href="#树形拓扑" class="headerlink" title="树形拓扑"></a>树形拓扑</h4><p>树形拓扑：可以看做是总线型和星型的结合，根节点的分叉，就像星型拓扑，每条分支上有多个节点共享该信道。</p>
<p>工作方式：<br>某一个结点发出数据后，会发给根节点，根节点收到数据后在全网广播。目的节点收到广播数据后，复制一份给自己处理。</p>
<p>优点：  </p>
<ul>
<li>易于扩展：增加新分支、新节点都比较容易。</li>
<li>易于隔离故障：隔离某分支、某个结点都比较容易。</li>
</ul>
<p>缺点：<br>可靠性比较差：各节点对树根的依赖太大，如果树根发生故障，则全网瘫痪。其可靠性类似于星型拓扑。</p>
<h4 id="混合型拓扑"><a href="#混合型拓扑" class="headerlink" title="混合型拓扑"></a>混合型拓扑</h4><p>将前述的几种拓扑结构混合在一起组网，形成混合型拓扑结构。</p>
<p>比如：  </p>
<ul>
<li>星型拓扑+ 总线型拓扑 = 星总拓扑</li>
<li>星型拓扑+ 环形拓扑 = 星环拓扑</li>
</ul>
<p>混合型拓扑的总线、环形上的节点往往是集中器，连接了若干主机。</p>
<p>优点：  </p>
<ul>
<li>故障诊断、隔离较方便：通过诊断、隔离某个集中器，即可隔离该集中器子网</li>
<li>易于扩展：要增加主机时，一种办法是在总线、环形上增加集中器，另一种办法是扩展集中器的接入口</li>
<li>安装方便：总线、环形只要连通这些集中器即可，和安装电话系统相似。</li>
</ul>
<p>缺点：  </p>
<ul>
<li>需要智能集中器：方便网络故障自动诊断、故障节点的隔离</li>
<li>集中器到各节点的电缆长度较长、安装量较大</li>
</ul>
<h4 id="网形拓扑"><a href="#网形拓扑" class="headerlink" title="网形拓扑"></a>网形拓扑</h4><p>网形拓扑：广泛的应用于广域网，而非局域网。</p>
<p>优点：没有瓶颈，网络冗余度高，可靠性高，失效可能小。</p>
<p>缺点：结构复杂，成本高，网络协议较复杂。</p>
<h2 id="1-3-2-按网络交换分式"><a href="#1-3-2-按网络交换分式" class="headerlink" title="1.3.2 按网络交换分式"></a>1.3.2 按网络交换分式</h2><ul>
<li>电路交换(Circuit Switching)：通信前，必须建立一条从发送端到目的端的物理信道，且通信期间双方始终占用该信道。类似于传统电话。</li>
<li>报文交换(Message Switching)：信道中传输的是发送方的完整报文，无长度限制，中间节点存储-转发该报文，接收方接受完整报文。类似于送信。</li>
<li>分组交换(Packet Switching)：也称为“包交换方式”，发送端先将报文分割为一个个等长的分组，各中间节点采用存储-转发方式传输分组到目的端，目的端再整合分组为一个完整的报文。<br>因为每个分组都很小，所以中间节点可以在内存中存储-转发分组，从而大大提高了传输速度。</li>
</ul>
<h2 id="1-3-3-按覆盖范围"><a href="#1-3-3-按覆盖范围" class="headerlink" title="1.3.3 按覆盖范围"></a>1.3.3 按覆盖范围</h2><p>按地理的覆盖范围分类：</p>
<ul>
<li>广域网（WAN,Wide Area Network，也称远程网)：分布范围几百~几千KM，可覆盖国家、洲，形成国际性的远程网络。通信子网通常是：卫星通信网、无线分组交换网、公用分组交换网。</li>
<li>城域网(MAN, Metropolitan Area Network）：将几十公里范围内的企业、机关、公司的局域网互连在一起。</li>
<li>局域网(LAN, Local Area Network)：覆盖极小的区域，提供高速、低误码率的高质量数据传输。</li>
</ul>
<h2 id="1-3-4-按网络传输技术"><a href="#1-3-4-按网络传输技术" class="headerlink" title="1.3.4 按网络传输技术"></a>1.3.4 按网络传输技术</h2><ul>
<li>广播式：所有节点共享一个信道，所有节点都能“听到”分组，各节点根据分组的目的地址来决定是接受还是丢弃。<br>在广播式网络中，分组的目的地址有3种：单播、多播、广播。</li>
<li>点对点式：每条物理线路连接了一对节点。如果源节点和目的节点没有直接的链路，就需要中间节点对分组存储-转发，并且可能存在多条通信线路，需要节点进行路由选择计算。</li>
</ul>
<p>广播式和点对点式的区别：点对点式需要“存储转发”和“路由选择”。</p>
<p>资源子网负责信息处理，通信子网负责信息传递。</p>
<p>PSE : packet switching exchanger，分组交换设备<br>pad: packet assembler dissassebler, 分组组装/拆卸设备<br>NCC: network control center<br>C：concentrator，集中器<br>G: gateway</p>
<p>imp : interface message processor , 接口信息处理机，是对PSE , PAD NCC C G 的统称。</p>
]]></content>
      <categories>
        <category>计算机网络原理</category>
        <category>1.计算机网络概述</category>
      </categories>
      <tags>
        <tag>网络拓扑</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络中容易搞混的知识点</title>
    <url>/2019/11/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%AD%E5%AE%B9%E6%98%93%E6%90%9E%E6%B7%B7%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%AD%E5%AE%B9%E6%98%93%E6%90%9E%E6%B7%B7%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>可以从不同的角度对网络进行区分(不同角度得到的分类可能出现重叠)。</p>
<h4 id="按通信服务类型"><a href="#按通信服务类型" class="headerlink" title="按通信服务类型"></a>按通信服务类型</h4><ul>
<li>面向连接服务：<pre><code>从数据交换方式来看，包括：电路交换、虚电路分组交换</code></pre></li>
<li>无连接服务<pre><code>从数据交换方式来看，包括：报文交换、数据报分组交换</code></pre><a id="more"></a>       

</li>
</ul>
<h4 id="按通信子网中信道类型（或者叫拓扑类型）"><a href="#按通信子网中信道类型（或者叫拓扑类型）" class="headerlink" title="按通信子网中信道类型（或者叫拓扑类型）"></a>按通信子网中信道类型（或者叫拓扑类型）</h4><ul>
<li>广播信道：多个网络节点共享公共信道</li>
<li>点对点信道：每条物理线路连接一对节点</li>
</ul>
<h4 id="按通信子网的传输方式"><a href="#按通信子网的传输方式" class="headerlink" title="按通信子网的传输方式"></a>按通信子网的传输方式</h4><p>数据传输方式：从整个通信子网看数据流。  </p>
<p>数据在通信子网内是广播传输，还是存储转发+路由选择传输。</p>
<ul>
<li>广播式传输：</li>
<li>点对点式传输：</li>
</ul>
<p>注意：  </p>
<ol>
<li>电路交换是接受后立即发送到下一个节点，网络节点无法存储数据，因此不属于点对点传输，而且电路交换占据专用物理通道，无法实现广播、多播，也不属于广播式传输。  </li>
<li>报文交换，可以实现多播、广播，也一定会采用存储转发+路由选择，因此报文传输既可能是广播式传输，也可能是点对点式传输。</li>
<li>分组交换，既可能是广播式传输，也可能是点对点式传输。</li>
</ol>
<p>结论：通信子网的传输方式与中间节点的交换技术并无关联。</p>
<h4 id="按中间节点的交换技术"><a href="#按中间节点的交换技术" class="headerlink" title="按中间节点的交换技术"></a>按中间节点的交换技术</h4><p>就单个中间节点来看。</p>
<p>中间节点并不关心数据内容，只是提供一种交换能力：将数据从一个节点传到另一个节点。</p>
<ul>
<li>电路交换：</li>
<li>报文交换：</li>
<li>分组交换<ul>
<li>虚电路分组交换</li>
<li>数据报分组交换</li>
</ul>
</li>
</ul>
<h6 id="端到端"><a href="#端到端" class="headerlink" title="端到端"></a>端到端</h6><p>端到端，有2种理解：</p>
<ol>
<li>源端-目的端：比如上文中“网络层提供了端到端的数据传输服务”。</li>
<li>源主机的某端口-目的主机的某端口：专用于传输层。</li>
</ol>
<h6 id="数据包，数据报"><a href="#数据包，数据报" class="headerlink" title="数据包，数据报"></a>数据包，数据报</h6><p>数据包：packet，即分组。</p>
<p>数据报：datagram ,即无连接服务中的分组。</p>
<p>一个数据报，包含了一个TCP段，它可能只有一个分组，也可能被分片成多个分组。</p>
<p>换句话说，MSS数据部分，可能被分片成多个分组。</p>
<h6 id="ovehead-，额外开销，虚耗"><a href="#ovehead-，额外开销，虚耗" class="headerlink" title="ovehead ，额外开销，虚耗"></a>ovehead ，额外开销，虚耗</h6><h6 id="拥塞控制和流量控制的差异"><a href="#拥塞控制和流量控制的差异" class="headerlink" title="拥塞控制和流量控制的差异"></a>拥塞控制和流量控制的差异</h6><p>拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</p>
<p>流量控制：指点对点通信量的控制，是端到端的问题。流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p>
]]></content>
      <categories>
        <category>计算机网络原理</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo + gitHub 搭建成功</title>
    <url>/2019/09/08/%E5%8D%9A%E6%96%87%E6%B5%8B%E8%AF%95/hexo-github-%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F/</url>
    <content><![CDATA[<p>用 hexo+github 写博客，是一直欠下的债。从年初拖到现在9月，才终于完成这个配置。</p>
<p>折腾了一天，终于能 deploy 到 github 并显示出来了。具体搭建过程不再复述。</p>
<a id="more"></a>

<p>本次搭建，参考了 <a href="https://segmentfault.com/a/1190000017986794" target="_blank" rel="noopener">超详细Hexo+Github Page搭建技术博客教程</a>，以及 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo的帮助文档</a>。  </p>
<p>其中遇到很多障碍：</p>
<ol>
<li><p>Github 原来用的私人邮箱注册，现在不想用该邮箱发布博文，于是重新注册了新邮箱。期间尝试了 github 的选项: keep my email address private。<br>结果这个选项对后面的 deploy 造成障碍，于是关闭了该选项。</p>
</li>
<li><p>nodej.js 和 git 是年初安装的，现在想看看 npm 已经安装过哪些东西，于是查阅了 ”如何查看 npm全局安装过的包”，指令如下：<br><code>npm list -g --depth 0</code></p>
</li>
<li><p>安装 hexo-deployer-git 时报错：<br><code>npm install hexo-deployer-git --save</code></p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">WARN</span> <span class="string">deprecated</span> <span class="string">swig@1.4.2:</span> <span class="string">This</span> <span class="string">package</span> <span class="string">is</span> <span class="literal">no</span> <span class="string">longer</span> <span class="string">maintained</span></span><br><span class="line"><span class="string">npm</span> <span class="string">WARN</span> <span class="string">saveError</span> <span class="attr">ENOENT:</span> <span class="literal">no</span> <span class="string">such</span> <span class="string">file</span> <span class="string">or</span> <span class="string">directory,</span> <span class="string">open</span> <span class="string">'/Users/irene.liu/package.json'</span></span><br><span class="line"><span class="string">npm</span> <span class="string">WARN</span> <span class="string">enoent</span> <span class="attr">ENOENT:</span> <span class="literal">no</span> <span class="string">such</span> <span class="string">file</span> <span class="string">or</span> <span class="string">directory,</span> <span class="string">open</span> <span class="string">'/Users/irene.liu/package.json'</span></span><br><span class="line"><span class="string">npm</span> <span class="string">WARN</span> <span class="string">irene.liu</span> <span class="literal">No</span> <span class="string">description</span></span><br><span class="line"><span class="string">npm</span> <span class="string">WARN</span> <span class="string">irene.liu</span> <span class="literal">No</span> <span class="string">repository</span> <span class="string">field.</span></span><br><span class="line"><span class="string">npm</span> <span class="string">WARN</span> <span class="string">irene.liu</span> <span class="literal">No</span> <span class="string">README</span> <span class="string">data</span></span><br><span class="line"><span class="string">npm</span> <span class="string">WARN</span> <span class="string">irene.liu</span> <span class="literal">No</span> <span class="string">license</span> <span class="string">field.</span></span><br></pre></td></tr></table></figure>

<p>原因：必须在hexo初始化的那个目录下执行安装！</p>
<ol start="4">
<li>hexo g 命令后出错：<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">FATAL can not read a block mapping <span class="built_in">entry</span>; a multiline key may not be an <span class="keyword">implicit</span> key at line <span class="number">8</span>, column <span class="number">12</span>:</span><br><span class="line">description:</span><br><span class="line">^</span><br><span class="line">YAMLException: can not read a block mapping <span class="built_in">entry</span>; a multiline key may not be an <span class="keyword">implicit</span> key at line <span class="number">8</span>, column <span class="number">12</span>:</span><br><span class="line">description:</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>原因：yml 配置文件中，键值对的冒号后少了空格</p>
<ol start="5">
<li>hexo g -d 后，网页显示404</li>
</ol>
<p>原因: github 库中缺少 index .html</p>
<p>解决办法：  </p>
<ul>
<li>按照  <a href="https://segmentfault.com/a/1190000017986794" target="_blank" rel="noopener">超详细Hexo+Github Page搭建技术博客教程</a> 的步骤，手工在 github 的库中创建 index.html  </li>
<li><code>npm install hexo-generator-index --save</code>，也会生成 index.html 文件。</li>
</ul>
<ol start="6">
<li>在 <code>_config.yml</code> 中用中文书写 title 和 subtitle ，显示为乱码。</li>
</ol>
<p>解决办法： _config.yml 使用 utf-8 编码保存即可。</p>
<p>最后还有一些疑惑，比如：<br>今天花了很大功夫配置SSH key 来访问 github，但后续 hexo g -d 时弹出账号密码框。</p>
]]></content>
      <categories>
        <category>应用软件</category>
      </categories>
  </entry>
</search>
